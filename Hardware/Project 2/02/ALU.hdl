// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    
	Mux16(a=x,b[0..15]=false,sel=zx,out=res1); 
    Not16(in=res1, out=notx );
    Mux16(a= res1, b= notx, sel= nx, out= res2);

    Mux16(a=y,b[0..15]=false,sel=zy,out=res3); 
    Not16(in=res3, out=noty );
    Mux16(a= res3, b= noty, sel= ny, out= res4);

    Add16(a =res2, b =res4 , out =res5);
    And16(a=res2, b=res4, out=res6);
    Mux16(a=res6 , b= res5 , sel=f , out= res7);

    Not16(in=res7, out=nres7 );
    Mux16(a= res7, b=nres7 , sel=no , out=out , out[0..7]=first , out[8..15]=last, out[15]=end);  

    Or8Way(in= first, out=ans1 );
    Or8Way(in= last, out=ans2 );
    Or(a= ans1, b= ans2, out= res8);
    Mux(a= true, b=false , sel=res8 , out= zr ); 

    Mux(a=true , b= false, sel=end , out=ng );

    
    
}